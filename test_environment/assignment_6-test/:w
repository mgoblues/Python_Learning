import random
import math
import sys
import pdb

def get_random_direction():
        direction = ""
        probability = random.random()

        if probability < 0.25:
                direction = "west"
        elif probability < 0.5 and probability > 0.25:
                direction = "east"
        elif probability < 0.75 and probability > 0.5:
                direction = "north"
        elif probability < 1.0 and probability > 0.75:
                direction = "south"

        return direction

print(get_random_direction())

def get_direction_displacement(direction_key):
        displacements = {
                'west': (-1, 0),
                'east': (1, 0),
                'north': (0, 1),
                'south': (0, -1)
                }
#        displacement = displacements[direction_key]

        return displacements[direction_key]

random_dir = get_random_direction()
displacement = get_direction_displacement(random_dir)

#print(random_dir)
#print(displacement)

def take_walk(steps):
	current_location = [0,0]
	for step_index in range(steps):
		direction = get_random_direction()

		displacement = get_direction_displacement(direction)

		# extract numerical values from tuple
		delta_x = displacement[0]
		delta_y = displacement[1]

		# updating current location coordinates
		current_location[0] = current_location[0] + delta_x
		current_location[1] = current_location[1] + delta_y

	return current_location

def take_all_walks(steps, runs):
	endpoints = []
	total_d = 0
	for run_index in range(runs):
		end_location = take_walk(steps)
		endpoints.append(end_location)
#		dx = end_location[0]
#		dy = end_location[1]
#		total_d += math.sqrt(dx*dx + dy*dy)
	
	return endpoints

def average_final_distance(endpoints):
	total_distance = 0
	for coord in endpoints:
		dx = coords[0]
		dy = coords[1]
	
		#pythag for distance
		distance = math.sqrt(dx*dx + dy*dy)

		total_distance += distance

	return total_distance / len(endpoints)

    # at end of __main__ code add these lines to see if it worked
    # mind the indentation, should be 4 spaces in front
	average_displacement = average_final_distance(end_locations)
	print(average_displacement)
	

if __name__ == "__main__" :
	steps = 10
	current_location = take_walk(steps)

print("Done with walk, printing end location: ")
print(current_location)

print(take_walk(get_direction_displacement(random_dir)))
delta_x = displacement[0]
delta_y = displacement[1]


current_location = take_walk(random_dir)
current_location[0] += delta_x
current_location[1] += delta_y

print(take_walk(get_direction_displacement(random_dir(current_location))))
